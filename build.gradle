plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

javafx {
    version = "21"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}

javadoc {
    exclude '**/MapTest.java'

    options.addStringOption('Xdoclint:none', '-quiet')
}

group 'iGOAT'
version '0.15-ALPHA'

application {
    mainClass = 'igoat.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://repo.maven.apache.org/maven2")
    }
    maven {
        url = uri("https://repo1.maven.org/maven2")
    }
}

dependencies {
    implementation 'org.openjfx:javafx-controls:21'
    implementation 'org.openjfx:javafx-fxml:21'
    implementation 'org.openjfx:javafx-base:21'
    implementation 'org.openjfx:javafx-graphics:21'
    
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.12'

    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0'

    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
            'Main-Class': 'igoat.Main',
            'Class-Path': configurations.runtimeClasspath.collect { it.name }.join(' ')
        )
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Create a task to build a fat/uber jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'igoat.Main'
    }
    archiveClassifier = 'fat'
    from { 
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to run the map test
task runMapTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'igoat.client.MapTest'
    jvmArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'javafx.controls,javafx.fxml,javafx.base,javafx.graphics'
    ]
}

// Task that combines JavaDoc and JAR generation
task 'build-cs108' {
    dependsOn javadoc
    dependsOn jar
    
    doLast {
        println "\nBuild completed successfully!"
        println "JavaDoc: ${javadoc.destinationDir}"
        println "JAR: ${jar.archiveFile.get()}"
    }
}
